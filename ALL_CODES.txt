XOR_GATE****************************************************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity xor_gate is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           xor_out : out STD_LOGIC);
end xor_gate;

architecture Behavioral of xor_gate is

begin
xor_out <= A xor B; 

end Behavioral;

AND_GATE*********************************************************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity and_gate is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           and_out : out STD_LOGIC);
end and_gate;

architecture Behavioral of and_gate is

begin
and_out <= A and B;

end Behavioral;

OR_GATE**********************************************************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity or_gate is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           or_out : out STD_LOGIC);
end or_gate;

architecture Behavioral of or_gate is

begin
or_out <= A or B;

end Behavioral;

ONE_BIT_FULL_ADDER*************************************************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity one_bit_adder is
    Port ( A : in STD_LOGIC;
           B : in STD_LOGIC;
           Cin : in STD_LOGIC;
           S : out STD_LOGIC;
           Cout : out STD_LOGIC);
end one_bit_adder;

architecture Structural of one_bit_adder is

component xor_gate is 
    port( A : in STD_LOGIC;
          B : in STD_LOGIC;
          xor_out : out STD_LOGIC);
    end component;

component and_gate is 
    port( A : in STD_LOGIC;
          B : in STD_LOGIC;
          and_out : out STD_LOGIC);
    end component;

component or_gate is 
    port( A : in STD_LOGIC;
          B : in STD_LOGIC;
          or_out : out STD_LOGIC);
    end component;

signal s1,s2,s3 :STD_LOGIC;

begin

xor1: xor_gate port map ( A , B , s1 );
xor2: xor_gate port map ( s1 , Cin , S );
and1: and_gate port map ( s1 , Cin , s2 );
and2: and_gate port map ( A , B , s3 );
or1: or_gate port map ( s2 , s3 , Cout);

end Structural;

ONE_BIT_FULL_ADDER_SIMULATION*****************************************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity one_bit_adder_simu is
--  Port ( );
end one_bit_adder_simu;

architecture Behavioral of one_bit_adder_simu is

component one_bit_adder is
    port ( A : in STD_LOGIC;
               B : in STD_LOGIC;
               Cin : in STD_LOGIC;
               S : out STD_LOGIC;
               Cout : out STD_LOGIC);
end component;

signal A , B , Cin : STD_LOGIC := '0';
signal S , Cout : STD_LOGIC := '0';

begin

uut: one_bit_adder port map ( A=>A , B=>B , Cin=>Cin , S=>S , Cout=>Cout );

process
begin

A <= '0';
B <= '0';
Cin <= '0';
wait for 100ns;

A <= '0';
B <= '0';
Cin <= '1';
wait for 100ns;

A <= '0';
B <= '1';
Cin <= '0';
wait for 100ns;

A <= '0';
B <= '1';
Cin <= '1';
wait for 100ns;

A <= '1';
B <= '0';
Cin <= '0';
wait for 100ns;

A <= '1';
B <= '0';
Cin <= '1';
wait for 100ns;

A <= '1';
B <= '1';
Cin <= '0';
wait for 100ns;

A <= '1';
B <= '1';
Cin <= '1';
wait for 100ns;

end process;
end Behavioral;

FOUR_BIT_FULL_ADDER*************************************************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity four_bit_adder is
    Port ( A : in STD_LOGIC_VECTOR (3 downto 0);
           B : in STD_LOGIC_VECTOR (3 downto 0);
           Cin : in STD_LOGIC;
           S : out STD_LOGIC_VECTOR (3 downto 0);
           Cout : out STD_LOGIC);
end four_bit_adder;

architecture Structural of four_bit_adder is

component one_bit_adder is
    port ( A : in STD_LOGIC;
               B : in STD_LOGIC;
               Cin : in STD_LOGIC;
               S : out STD_LOGIC;
               Cout : out STD_LOGIC);
end component;

signal s1,s2,s3,s4 : STD_LOGIC;

begin

xor1: one_bit_adder port map ( A(0) , B(0) , Cin , S(0) , s1 );
xor2: one_bit_adder port map ( A(1) , B(1) , s1 , S(1) , s2 );
xor3: one_bit_adder port map ( A(2) , B(2) , s2 , S(2) , s3 );
xor4: one_bit_adder port map ( A(3) , B(3) , s3 , S(3) ,Cout );

end Structural;

FOUR_BIT_FULL_ADDER_SIMULATION****************************************************************************************

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity four_bit_adder_simu is
--  Port ( );
end four_bit_adder_simu;

architecture Behavioral of four_bit_adder_simu is

component four_bit_adder is
Port ( A : in STD_LOGIC_VECTOR (3 downto 0);
           B : in STD_LOGIC_VECTOR (3 downto 0);
           Cin : in STD_LOGIC;
           S : out STD_LOGIC_VECTOR (3 downto 0);
           Cout : out STD_LOGIC);
end component;

signal A , B , S : STD_LOGIC_VECTOR (3 downto 0) := "0000" ;
signal Cin ,Cout : STD_LOGIC := '0';

begin

uut: four_bit_adder port map ( A=>A , B=>B , Cin=>Cin , S=>S , Cout=>Cout );

process 
begin

A <= "0000";
B <= "0000";
Cin <= '0';
wait for 100ns;

A <= "1010";
B <= "0011";
Cin <= '1';
wait for 100ns;

A <= "1100";
B <= "0011";
Cin <= '0';
wait for 100ns;

A <= "0101";
B <= "0000";
Cin <= '1';
wait for 100ns;

A <= "1001";
B <= "0111";
Cin <= '0';
wait for 100ns;

A <= "1101";
B <= "0010";
Cin <= '0';
wait for 100ns;

A <= "1101";
B <= "1110";
Cin <= '1';
wait for 100ns;

A <= "1111";
B <= "1111";
Cin <= '1';
wait for 100ns;

end process;
end Behavioral;

2*1 mux ********************************************************************************************************
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity two_cross_one_MUX is
    Port ( input : in STD_LOGIC_VECTOR (1 downto 0);
           sel : in STD_LOGIC;
           output : out STD_LOGIC);
end two_cross_one_MUX;

architecture Structural of two_cross_one_MUX is

component and_gate is 
    port(A : in STD_LOGIC;
            B : in STD_LOGIC;
             and_out : out STD_LOGIC);
       end component;
       
component or_gate is 
           port( A : in STD_LOGIC;
                 B : in STD_LOGIC;
                 or_out : out STD_LOGIC);
           end component;
           
component not_gate is
port( A : in STD_LOGIC;
    not_out : out STD_LOGIC);
   end component;
    
signal s1,s2,s3 :STD_LOGIC;

begin

not1: not_gate port map ( sel , s1 );  
and1: and_gate port map ( input(0) , s1 , s2 );
and2: and_gate port map ( input(1) , sel , s3 );
or1: or_gate port map ( s2 , s3 , output );


end Structural;

2*1 simu********************************************************************************************
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity two_cross_one_mux_simu is
--  Port ( );
end two_cross_one_mux_simu;

architecture Behavioral of two_cross_one_mux_simu is
component two_cross_one_MUX 
 Port ( input : in STD_LOGIC_VECTOR (1 downto 0);
          sel : in STD_LOGIC;
          output : out STD_LOGIC);
end component;

signal input : STD_LOGIC_VECTOR (1 downto 0) := "00;
signal sel,output : STD_LOGIC := '0';

begin

uut: two_cross_one_MUX port map ( input=>input , sel => sel , output => output );

process
begin

input <= "00";
sel <= '0';
wait for 100ns;

input <= "10";
sel <= '1';
wait for 100ns;

input <= "10";
sel <= '0';
wait for 100ns;
end process

end Behavioral;




